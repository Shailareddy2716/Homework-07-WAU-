# -*- coding: utf-8 -*-
"""Homework-07-Dag-02

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1EKPxnWwZxKy5SCKyxHmy83rZ6GVK8ahP
"""

from airflow import DAG
from airflow.decorators import task
from airflow.providers.snowflake.hooks.snowflake import SnowflakeHook
from airflow.utils.dates import days_ago
from datetime import datetime

def execute_snowflake_query(query):
    hook = SnowflakeHook(snowflake_conn_id='snowflake_conn')
    conn = hook.get_conn()
    cursor = conn.cursor()
    cursor.execute(query)
    cursor.close()
    conn.close()

# Joining two tables
create_session_summary_table = """
CREATE TABLE IF NOT EXISTS dev.analytics.session_summary AS
SELECT
    usc.userId,
    usc.sessionId,
    usc.channel,
    st.ts
FROM
    dev.raw_data.user_session_channel usc
JOIN
    dev.raw_data.session_timestamp st
ON
    usc.sessionId = st.sessionId
WHERE
    usc.sessionId IS NOT NULL;
"""

# Inserting data into table with duplicate check
insert_into_session_summary = """
INSERT INTO dev.analytics.session_summary (userId, sessionId, channel, ts)
SELECT
    usc.userId,
    usc.sessionId,
    usc.channel,
    st.ts
FROM
    dev.raw_data.user_session_channel usc
JOIN
    dev.raw_data.session_timestamp st
ON
    usc.sessionId = st.sessionId
WHERE
    usc.sessionId NOT IN (SELECT sessionId FROM dev.analytics.session_summary);
"""

default_args = {
    'owner': 'airflow',
    'start_date': datetime(2024, 10, 23),
    'depends_on_past': False,
}

with DAG(
    'Join_tables_in_Snowflake',
    default_args=default_args,
    schedule_interval='30 2 * * *',
) as dag:

    @task
    def create_session_summary():
        """Transform: Create session_summary table by joining two tables."""
        execute_snowflake_query(create_session_summary_table)
        print("session_summary table created under analytics schema.")

    @task
    def insert_session_summary():
        """Load: Insert data into session_summary with duplicate check."""
        execute_snowflake_query(insert_into_session_summary)
        print("Data inserted into session_summary with duplicate check.")

    summary_table_created = create_session_summary()
    summary_table_inserted = insert_session_summary()

    # Order of tasks to be executed
    summary_table_created >> summary_table_inserted